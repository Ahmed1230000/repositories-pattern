<?php

namespace App\Services;

use App\Contracts\RepositoryInterface;
use Packages\AhmedMahmoud\RepositoryPattern\Src\Helpers\HandleError;

/**
 * Class {{ModelName}}Service
 *
 * Service layer for handling business logic related to {{ModelName}}.
 * It delegates data operations to the repository and handles exceptions gracefully.
 *
 * @package App\Services
 */
class {{ModelName}}Service
{
    use HandleError;

    /**
     * @var RepositoryInterface
     */
    protected $repository;

    /**
     * {{ModelName}}Service constructor.
     *
     * @param RepositoryInterface $repository The repository instance to interact with data storage.
     */
    public function __construct(RepositoryInterface $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Retrieve a paginated list of all resources.
     *
     * @return mixed
     * @throws \Exception
     */
    public function index()
    {
        try {
            return $this->repository->index();
        } catch (\Exception $e) {
            $this->handleError('Failed to retrieve data', ['error' => $e->getMessage()]);
            throw $e;
        }
    }

    /**
     * Create a new resource with the given data.
     *
     * @param array $data The data to create the resource with.
     * @return mixed
     * @throws \Exception
     */
    public function store(array $data)
    {
        try {
            return $this->repository->store($data);
        } catch (\Exception $e) {
            $this->handleError('Failed to create resource', ['error' => $e->getMessage()]);
            throw $e;
        }
    }

    /**
     * Retrieve a resource by its ID.
     *
     * @param int $id The ID of the resource.
     * @return mixed
     * @throws \Exception
     */
    public function show(int $id)
    {
        try {
            return $this->repository->show($id);
        } catch (\Exception $e) {
            $this->handleError('Failed to retrieve resource', ['error' => $e->getMessage()]);
            throw $e;
        }
    }

    /**
     * Update the resource with the given ID using provided data.
     *
     * @param int $id The ID of the resource.
     * @param array $data The data to update the resource with.
     * @return mixed
     * @throws \Exception
     */
    public function update(int $id, array $data)
    {
        try {
            return $this->repository->update($id, $data);
        } catch (\Exception $e) {
            $this->handleError('Failed to update resource', ['error' => $e->getMessage()]);
            throw $e;
        }
    }

    /**
     * Delete the resource with the specified ID.
     *
     * @param int $id The ID of the resource.
     * @return mixed
     * @throws \Exception
     */
    public function destroy(int $id)
    {
        try {
            return $this->repository->destroy($id);
        } catch (\Exception $e) {
            $this->handleError('Failed to delete resource', ['error' => $e->getMessage()]);
            throw $e;
        }
    }
}
